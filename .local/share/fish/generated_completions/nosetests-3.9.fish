# nosetests-3.9
# Autogenerated from man page /usr/share/man/man1/nosetests-3.9.1.gz
complete -c 'nosetests-3.9' -s V -l version -d 'Output nose version and exit'
complete -c 'nosetests-3.9' -s p -l plugins -d 'Output list of available plugins and exit'
complete -c 'nosetests-3.9' -s v -l verbose -d 'Be more verbose.  [NOSE_VERBOSE]'
complete -c 'nosetests-3.9' -l verbosity -d 'Set verbosity; --verbosity=2 is the same as -v'
complete -c 'nosetests-3.9' -s q -l quiet -d 'Be less verbose'
complete -c 'nosetests-3.9' -s c -l config -d 'Load configuration from config file(s)'
complete -c 'nosetests-3.9' -s w -l where -d 'Look for tests in this directory.  May be specified multiple times'
complete -c 'nosetests-3.9' -l py3where -d 'Look for tests in this directory under Python 3. x'
complete -c 'nosetests-3.9' -s m -l match -l testmatch -d 'Files, directories, function names, and class names that match this regular e…'
complete -c 'nosetests-3.9' -l tests -d 'Run these tests (comma-separated list)'
complete -c 'nosetests-3.9' -s l -l debug -d 'Activate debug logging for one or more systems'
complete -c 'nosetests-3.9' -l debug-log -d 'Log debug messages to this file (default: sys. stderr)'
complete -c 'nosetests-3.9' -l logging-config -l log-config -d 'Load logging config from this file -- bypasses all other logging config setti…'
complete -c 'nosetests-3.9' -s I -l ignore-files -d 'Completely ignore any file that matches this regular expression'
complete -c 'nosetests-3.9' -s e -l exclude -d 'Don\'t run tests that match regular expression [NOSE_EXCLUDE]'
complete -c 'nosetests-3.9' -s i -l include -d 'This regular expression will be applied to files, directories, function names…'
complete -c 'nosetests-3.9' -s x -l stop -d 'Stop running tests after the first error or failure'
complete -c 'nosetests-3.9' -s P -l no-path-adjustment -d 'Don\'t make any changes to sys. path when loading tests [NOSE_NOPATH]'
complete -c 'nosetests-3.9' -l exe -d 'Look for tests in python modules that are executable'
complete -c 'nosetests-3.9' -l noexe -d 'DO NOT look for tests in python modules that are executable'
complete -c 'nosetests-3.9' -l traverse-namespace -d 'Traverse through all path entries of a namespace package'
complete -c 'nosetests-3.9' -l first-package-wins -l first-pkg-wins -l 1st-pkg-wins -d 'nose\'s importer will normally evict a package from sys'
complete -c 'nosetests-3.9' -l no-byte-compile -d 'Prevent nose from byte-compiling the source into '
complete -c 'nosetests-3.9' -s a -l attr -d 'Run only tests that have attributes specified by ATTR [NOSE_ATTR]'
complete -c 'nosetests-3.9' -s A -l eval-attr -d 'Run only tests for whose attributes the Python expression EXPR evaluates to T…'
complete -c 'nosetests-3.9' -s s -l nocapture -d 'Don\'t capture stdout (any stdout output will be printed immediately) [NOSE_NO…'
complete -c 'nosetests-3.9' -l nologcapture -d 'Disable logging capture plugin.  Logging configuration will be left intact'
complete -c 'nosetests-3.9' -l logging-format -d 'Specify custom format to print statements'
complete -c 'nosetests-3.9' -l logging-datefmt -d 'Specify custom date/time format to print statements'
complete -c 'nosetests-3.9' -l logging-filter -d 'Specify which statements to filter in/out'
complete -c 'nosetests-3.9' -l logging-clear-handlers -d 'Clear all other logging handlers'
complete -c 'nosetests-3.9' -l logging-level -d 'Set the log level to capture'
complete -c 'nosetests-3.9' -l with-coverage -d 'Enable plugin Coverage:  Activate a coverage report using Ned Batchelder\'s co…'
complete -c 'nosetests-3.9' -l cover-package -d 'Restrict coverage output to selected packages [NOSE_COVER_PACKAGE]'
complete -c 'nosetests-3.9' -l cover-erase -d 'Erase previously collected coverage statistics before run'
complete -c 'nosetests-3.9' -l cover-tests -d 'Include test modules in coverage report [NOSE_COVER_TESTS]'
complete -c 'nosetests-3.9' -l cover-min-percentage -d 'Minimum percentage of coverage for tests to pass [NOSE_COVER_MIN_PERCENTAGE]'
complete -c 'nosetests-3.9' -l cover-inclusive -d 'Include all python files under working directory in coverage report'
complete -c 'nosetests-3.9' -l cover-html -d 'Produce HTML coverage information'
complete -c 'nosetests-3.9' -l cover-html-dir -d 'Produce HTML coverage information in dir'
complete -c 'nosetests-3.9' -l cover-branches -d 'Include branch coverage in coverage report [NOSE_COVER_BRANCHES]'
complete -c 'nosetests-3.9' -l cover-xml -d 'Produce XML coverage information'
complete -c 'nosetests-3.9' -l cover-xml-file -d 'Produce XML coverage information in file'
complete -c 'nosetests-3.9' -l pdb -d 'Drop into debugger on failures or errors'
complete -c 'nosetests-3.9' -l pdb-failures -d 'Drop into debugger on failures'
complete -c 'nosetests-3.9' -l pdb-errors -d 'Drop into debugger on errors'
complete -c 'nosetests-3.9' -l no-deprecated -d 'Disable special handling of DeprecatedTest exceptions'
complete -c 'nosetests-3.9' -l with-doctest -d 'Enable plugin Doctest:  Activate doctest plugin to find and run doctests in n…'
complete -c 'nosetests-3.9' -l doctest-tests -d 'Also look for doctests in test modules'
complete -c 'nosetests-3.9' -l doctest-extension -d 'Also look for doctests in files with this extension [NOSE_DOCTEST_EXTENSION]'
complete -c 'nosetests-3.9' -l doctest-result-variable -d 'Change the variable name set to the result of the last interpreter command fr…'
complete -c 'nosetests-3.9' -l doctest-fixtures -d 'Find fixtures for a doctest file in module with this name appended to the bas…'
complete -c 'nosetests-3.9' -l doctest-options -d 'Specify options to pass to doctest.  Eg.  \'+ELLIPSIS,+NORMALIZE_WHITESPACE\''
complete -c 'nosetests-3.9' -l with-isolation -d 'Enable plugin IsolationPlugin:  Activate the isolation plugin to isolate chan…'
complete -c 'nosetests-3.9' -s d -l detailed-errors -l failure-detail -d 'Add detail to error output by attempting to evaluate failed asserts [NOSE_DET…'
complete -c 'nosetests-3.9' -l with-profile -d 'Enable plugin Profile:  Use this plugin to run tests using the hotshot profil…'
complete -c 'nosetests-3.9' -l profile-sort -d 'Set sort order for profiler output'
complete -c 'nosetests-3.9' -l profile-stats-file -d 'Profiler stats file; default is a new temp file on each run'
complete -c 'nosetests-3.9' -l profile-restrict -d 'Restrict profiler output.  See help for pstats. Stats for details'
complete -c 'nosetests-3.9' -l no-skip -d 'Disable special handling of SkipTest exceptions'
complete -c 'nosetests-3.9' -l with-id -d 'Enable plugin TestId:  Activate to add a test id (like #1) to each test name …'
complete -c 'nosetests-3.9' -l id-file -d 'Store test ids found in test runs in this file.  Default is the file '
complete -c 'nosetests-3.9' -l failed -d 'Run the tests that failed in the last test run'
complete -c 'nosetests-3.9' -l processes -d 'Spread test run among this many processes'
complete -c 'nosetests-3.9' -l process-timeout -d 'Set timeout for return of results from each test runner process'
complete -c 'nosetests-3.9' -l process-restartworker -d 'If set, will restart each worker process once their tests are done, this help…'
complete -c 'nosetests-3.9' -l with-xunit -d 'Enable plugin Xunit: This plugin provides test results in the standard XUnit …'
complete -c 'nosetests-3.9' -l xunit-file -d 'Path to xml file to store the xunit report in.  Default is nosetests'
complete -c 'nosetests-3.9' -l xunit-testsuite-name -d 'Name of the testsuite in the xunit xml, generated by plugin'
complete -c 'nosetests-3.9' -l all-modules -d 'Enable plugin AllModules: Collect tests from all python modules'
complete -c 'nosetests-3.9' -l collect-only -d 'Enable collect-only:  Collect and output test names only, don\'t run any tests'

