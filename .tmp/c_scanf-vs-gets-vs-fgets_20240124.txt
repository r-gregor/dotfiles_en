filename: c_scanf-vs-gets-vs-fgets_20240124.txt
https://copyprogramming.com/howto/c-scanf-vs-gets-vs-fgets

Comparison of C's scanf(), gets(), and fgets() Functions
2023-05-14

One solution highlights that the function lacks protection against buffer overflows, while another solution acknowledges that preventing buffer overflow is not possible.
Table of contents

    C - scanf() vs gets() vs fgets()
    Differences between gets(str) and scanf("%s", str)
    Why is gets() more dangerous than scanf()?
    What is the difference between scanf () and gets () functions in C language?
    What is the difference between getchar () and scanf ()?
    What is the difference between sscanf and fgets?
    What is the difference between scanf_s () and scanf ()?

List index out of bounds Exception ...
Remaining Time -4:37
List index out of bounds Exception in Salesforce
Ezoic
C - scanf() vs gets() vs fgets()
Question:

I have been working on a program that converts a string of characters (assuming they are numbers) into an integer. The program is relatively straightforward.

Upon completion, I observed certain unusual "bugs" that I cannot explain due to my limited understanding of the workings of the scanf() , gets() , and fgets() functions, despite having gone through a significant amount of literature.

To avoid excess wording, here's the program's code.

#include 
#define MAX 100
int CharToInt(const char *);
int main()
{
    char str[MAX];
    printf(" Enter some numbers (no spaces): ");
    gets(str);
//  fgets(str, sizeof(str), stdin);
//  scanf("%s", str);
    printf(" Entered number is: %d\n", CharToInt(str));
    return 0;
}
int CharToInt(const char *s)
{
    int i, result, temp;
    result = 0;
    i = 0;
    while(*(s+i) != '\0')
    {
        temp = *(s+i) & 15;
        result = (temp + result) * 10;
        i++;
    }
    return result / 10;
}

The issue I've encountered is that the program functions flawlessly only when utilizing the gets() feature.

When fgets() is utilized, the outcome is slightly inaccurate due to the fgets() function that reads the last newline character (ASCII value 10), causing the result to be disturbed.

The usage of scanf() function leads to inaccurate results, as the first character seems to have an ASCII value of -52, which is unexplainable.
Ezoic

Given that gets() is not recommended, I'm curious whether fgets() could be utilized here to avoid reading as ignores) newline . Additionally, I'm interested in understanding the purpose of the scanf() feature in this software.

Solution 1:

    Avoid utilizing <code> gets </code> as it does not safeguard against a <a class="text-blue-600" href="https://copyprogramming.com/howto/preventing-buffer-overflow" title="Preventing Buffer Overflow">buffer overflow</a> vulnerability. This implies that the buffer's size cannot be specified, resulting in the possibility of a user entering a line that exceeds the buffer's capacity, hence overwriting memory.

    Exercise caution when utilizing <code> scanf </code> since it can lead to similar <a class="text-blue-600" href="https://copyprogramming.com/howto/buffer-overflow-using-external-input-device" title="Buffer overflow using external input device">Buffer Overflow</a> complications as <code> gets </code> if used carelessly. Furthermore, it presents additional challenges that make it challenging to employ accurately.

    In general, <code> fgets </code> is the preferred option, even though it may be inconvenient due to the need to remove newlines, determine <a class="text-blue-600" href="https://copyprogramming.com/howto/determining-appropriate-buffer-size" title="Determining Appropriate Buffer Size">buffer size</a> in advance, and decide how to handle lines that are too long. There are alternative functions available, such as <code> getline </code> on POSIX systems, or Chuck Falconer's public domain <code> ggets </code> function, which offer dynamic allocation. Additionally, it's worth noting that <code> ggets </code> behaves like <code> gets </code>, as it removes trailing newlines.
    Ezoic

Solution 2:

Ezoic To avoid gets , it's recommended to use fgets as it can detect when the buffer was too small and there's more to be read. However, if you prefer fgets that doesn't read the new-line, you can opt for fscanf and apply a scan-set conversion such as "%N[^ ]" where the buffer size minus one replaces 'N'. This way, you won't lose the indication of a too-small buffer.

To eliminate the final new-line from a buffer after reading, an unconventional yet simple method is available using fgets . Although not the intended use of strtok , I frequently utilize this approach rather than the intended method, which I usually avoid.

Solution 3:

Ezoic This code has multiple issues that we need to address. We'll rectify the poorly labeled variables and functions and further examine the problems.

    To operate on a string instead of a single character, it is necessary to rename <code> CharToInt() </code> to the appropriate <code> StringToInt() </code>.
    Ezoic

    The <code> CharToInt() </code> function is considered hazardous as it neglects to verify whether the user mistakenly provides a NULL pointer.

    The validation process skips invalid input, which may result in the inclusion of bogus values in the output. For instance, entering non-digits as input will yield inaccurate results. For example, the code <code> *(s+i) &amp; 15 </code> may produce a value of 14 when the input <code> N </code> is entered.

    It is suggested that the unidentified <code> temp </code> located at <code> CharToInt() </code> [sic.] be referred to as <code> digit </code>, as it accurately reflects its nature.
    Ezoic

    The <code> return result / 10; </code> is merely a poor workaround to overcome a flawed implementation - it's essentially a kludge.

    The name given to <code> MAX </code> is also problematic as it could potentially clash with its standard usage, which is exemplified by <code> #define MAX(X,y) ((x)&gt;(y))?(x):(y) </code>.

    Using <code> *(s+i) </code> might make the code verbose and less readable. Instead, it is better to use <code> *s </code> to avoid cluttering the code with an unnecessary temporary index like <code> i </code>.

gets()

The occurrence of buffer overflow is a major concern since it can lead to disastrous consequences. To illustrate, if the buffer size is limited to 2 and the user inputs more than 2 characters, the buffer will overflow, as shown in str .
scanf()

This is just as detrimental as it can result in a buffer overflow for the input string.
Ezoic

When scanf() function is used, the output is incorrect because the initial character seems to have an ASCII value of -52, which was mentioned earlier.

The bug could not be replicated as it was caused by incorrect usage of scanf().
fgets()

By specifying the buffer size, which accounts for the NULL character, you ensure that the input string buffer is not overflowed, making it a secure approach.
getline()

Some individuals have proposed utilizing the C POSIX standard as an alternative to the current solution. Regrettably, Microsoft solely incorporates the standard C++ string template function, rendering the C version impractical and non-portable. While Microsoft's C++ code has been accessible since at least version 6, it is not applicable to the current query since it specifically pertains to C and not C++.
Misc.

Finally, it should be noted that the existing version has a flaw where it fails to detect integer overflow . This flaw leads to negative numbers when the user inputs excessively large numbers. For example, 9876543210 becomes -18815698 . This issue requires fixing as well.
Ezoic

For an unsigned int , resolving this issue is relatively simple. We can identify an overflow occurrence by comparing the current and previous partial numbers and returning the lower value.

Performing the task for signed int requires some additional effort. While in assembly we could examine the carry-flag, there is no uniform method available in C to accomplish detect overflow with signed int math. However, as we are multiplying by a constant * 10 , we can detect this effortlessly by utilizing an equivalent equation.

n = x*10 = x*8 + x*2

In case of an overflow in x*8, it is reasonable to assume that x*10 will also overflow. In the case of a 32-bit integer, x*8 will overflow at 0x100000000, so detecting when x is greater than or equal to 0x20000000 is sufficient. To avoid making assumptions about the number of bits in the int , we only need to check if the top 3 Most Significant Bits (MSBs) are set.

Moreover, we require a secondary test for overflow. If the concatenation of digits sets the msb (sign bit), it indicates that the number has also exceeded its limit.
Code

Included in this package is a secure version and a code for identifying overflow in the unsafe versions. Additionally, signed and unsigned variations are provided through #define SIGNED 1 .

#include 
#include  // isdigit()
// 1 fgets
// 2 gets
// 3 scanf
#define INPUT 1
#define SIGNED 1
// re-implementation of atoi()
// Test Case: 2147483647 -- valid    32-bit
// Test Case: 2147483648 -- overflow 32-bit
int StringToInt( const char * s )
{
    int result = 0, prev, msb = (sizeof(int)*8)-1, overflow;
    if( !s )
        return result;
    while( *s )
    {
        if( isdigit( *s ) ) // Alt.: if ((*s >= '0') && (*s <= '9'))
        {
            prev     = result;
            overflow = result >> (msb-2); // test if top 3 MSBs will overflow on x*8
            result  *= 10;
            result  += *s++ & 0xF;// OPTIMIZATION: *s - '0'
            if( (result < prev) || overflow ) // check if would overflow
                return prev;
        }
        else
            break; // you decide SKIP or BREAK on invalid digits
    }
    return result;
}
// Test case: 4294967295 -- valid    32-bit
// Test case: 4294967296 -- overflow 32-bit
unsigned int StringToUnsignedInt( const char * s )
{
    unsigned int result = 0, prev;
    if( !s )
        return result;
    while( *s )
    {
        if( isdigit( *s ) ) // Alt.: if (*s >= '0' && *s <= '9')
        {
            prev    = result;
            result *= 10;
            result += *s++ & 0xF; // OPTIMIZATION: += (*s - '0')
            if( result < prev ) // check if would overflow
                return prev;
        }
        else
            break; // you decide SKIP or BREAK on invalid digits
    }
    return result;
}
int main()
{
    int  detect_buffer_overrun = 0;
    #define   BUFFER_SIZE 2    // set to small size to easily test overflow
    char str[ BUFFER_SIZE+1 ]; // C idiom is to reserve space for the NULL terminator
    printf(" Enter some numbers (no spaces): ");
#if   INPUT == 1
    fgets(str, sizeof(str), stdin);
#elif INPUT == 2
    gets(str); // can overflows
#elif INPUT == 3
    scanf("%s", str); // can also overflow
#endif
#if SIGNED
    printf(" Entered number is: %d\n", StringToInt(str));
#else
    printf(" Entered number is: %u\n", StringToUnsignedInt(str) );
#endif
    if( detect_buffer_overrun )
        printf( "Input buffer overflow!\n" );
    return 0;
}

Solution 4:

It's accurate that gets should never be utilized. To use fgets , all you have to do is overwrite the newline.

char *result = fgets(str, sizeof(str), stdin);
char len = strlen(str);
if(result != NULL && str[len - 1] == '\n')
{
  str[len - 1] = '\0';
}
else
{
  // handle error
}

In the absence of embedded NULLs , an alternative approach is to use POSIX getline .

char *line = NULL;
size_t len = 0;
ssize_t count = getline(&line, &len, stdin);
if(count >= 1 && line[count - 1] == '\n')
{
  line[count - 1] = '\0';
}
else
{
  // Handle error
}

The benefit of utilizing getline is that it automatically handles allocation and reallocation, manages any potential embedded NULLs, and provides a count, eliminating the need to deal with strlen . It is important to note that getline cannot be used with an array, and the pointer must either be NULL or capable of being freed.

I'm uncertain about the problem you're encountering with the code labelled as scanf .
Difference between getch() and scanf() functions, there's a newline left behind in the input stream which causes the subsequent scanf () to skip input in the loop. Note that getch () is non-standard function. You can use getchar () instead. Or Change it to: scanf (" %c",&t);
Tags:
scanf vs gets vs fgets
differences between getsstr and scanf
C Programming for Intermediate
C Programming for intermediate gets () and scanf () functions discusses the definition, syntax and implementation differences between the …
Gets() function vs scanf() function
language : C programming
Differences between gets(str) and scanf("%s", str)
Question:

Can you provide an example to explain the distinctions between gets(str) and scanf("%s", str) when str is a character array ?

Solution:

Here is a demonstration of the distinction between scanf() and gets() .

To learn more about the distinctions between scanf and gets in C, visit this link: https://www.geeksforgeeks.org/difference-between-scanf-and-gets-in-c/

Thanks.
C - how gets() work after scanf?, When I do the space, it first does scanf then the gets and after that it print the number and print the string. By adding a space, scanf("%d ", &num); does not return until non-white-space is entered after the number (as in 'a' in the following). Since stdin is usually line buffered, this means input of 2 lines needs to first occur. …
Why is gets() more dangerous than scanf()?
Question:

Both functions have the capability to cause a buffer overflow, but while scanf() is recommended, gets() should always be avoided.

Is the reason for scanf() only related to the allowances for formatting arguments, or are there additional factors at play?

Solution 1:

The gets procedure lacks protection from buffer overflows .

By utilizing the scanf format string, you can specify the maximum length of the string that will be retrieved from standard input and placed into a designated memory buffer. For instance, if you implement scanf("%10s ", str); , the maximum allowable length will be 10 characters. Remember that the str buffer must be 11 bytes long to accommodate the NULL terminating character.

To optimize performance, it is recommended to utilize the fgets function instead of solely relying on scanf to work around buffer overflow issues in gets .

Solution 2:

The issue with gets() is that it allows input of more characters than the buffer size, which is a problem. Additionally, gets() is outdated and no longer used in C11. Therefore, the comparison between gets() and scanf() is no longer applicable. However, scanf() also has issues when handling unformatted data.
Ezoic

An alternative and preferable choice would involve using fgets() to obtain the input and then manipulating it accordingly.

Solution 3:

As prevent buffer overflow cannot be achieved, using fgets is a better option since it allows for a specified maximum buffer length, making it safer.

Solution 4:

Preventing a malformed input case is not feasible with gets . However, scanf provides the ability to regulate the quantity of data being read.

What are the steps to cause a buffer overflow in c programming?
C - Use scanf(), gets() or fgets() function?, The remaining line breaks without being consumed in the part of scanf("%d", &shift). So, it appears that fgets and gets you to enter a new line up to not function.(Because they are given a new line remaining)
Read other technology post: Forge viewer - Core extensions - how to load them, standard way does not work
Related posts:
An Example of Using fgets, sgets, and gets in C Code
Gets() function in C
Possible Alternatives to C++'s sprintf Error (C4996) Warning for Unsafe Variables
Optimal input number function in the C programming language
Ezoic
C read input in arr in c
Distinctions Among scanf() and fgets()
Storing strings in C programming language
Unsafe Function or Variable: Consider Scanning with Scanf
The Hazards of C Standard Library Functions and Their Alternatives
A Revised Approach to Implementing C's fgetline() Function for Beginners
Acquiring User Input Characters in C
Identifying Potential Kernel Functions
Optimizing Memory Usage with fgets()
Extracting a String from User Input in the C Programming Language
Illustration of Using C fcets Instead of scanf in Code Samples
Alternative options for C integer input instead of scanf
Receiving Multiple Inputs as Strings
Reading a string from standard input in C
Ezoic
How can I retrieve a string from the standard input?
Acquiring string input in C programming language
Implementing scanf C code example manually: A
Printing ASCII Characters in C Using their Decimal Equivalent
Using fgets() for Input from Command Line
Printing the content of a file in C by reading it
Implementation of atoi()
Checking if the User Input is an Integer in C Language
An Illustrative C Code Example for Reading Input from stdin
Determining if a value is an integer or not in the C programming language
String in C treated as complete line in C
Parsing command line inputs using semicolons - What is the process?
Write a comment:
Ezoic
Your name
Title
Message
Hetzner offer

Signs up and receive €30 in cloud credits with Hetzner, the best cloud hosting service in 2022. Register new account and receive 30 Euro free credit lifetime (Available for new customers only). This promotion is available for a limited time, so act fast before it’s too late!
Search
Related questions

    What is the difference between scanf () and gets () functions in C language?
    C language offers two input functions, scanf() and gets(), which retrieve external input and pass it to the system. Although both functions serve this purpose, they possess distinct characteristics. While scanf() can receive input from the keyboard and store it based on the format specifier provided.
    What is the difference between getchar () and scanf ()?
    When your requirements are complex, getchar() may not fulfill them completely. scanf() enables you to read multiple characters simultaneously. Attempting to store the output in a char variable is a common mistake while using getchar().
    What is the difference between sscanf and fgets?
    The fgets (3) function reads a line from the input file stream and copies it as a null-terminated string to the buffer str, limiting the output size to the given bytes. On the other hand, scanf does not perform bounds checking. Therefore, it is recommended to use fgets as it is a better choice. After using fgets, you can evaluate it using sscanf ().
    What is the difference between scanf_s () and scanf ()?
    To target C99 or prior, opt for using scanf(). However, if you're working with the C11 Standard or newer versions, it's more challenging to use scanf_s() due to its enhanced security against buffer overflows.

Latest posts

    Get current user in sql server
    Python implementation to randomly choose n elements from a list
    Executing a menuItemClick event by utilizing the active tab index
    Importing a py file from a different directory in Jupyter notebook
    Dpkg: dpkg frontend is currently locked by another process error
    Retrieve all elements in Javascript using data attribute
    Convertible logical scalar values required as operands for the logical AND (&amp;&amp;) and OR (||) operators. Utilize the ANY or ALL functions to reduce operands to logical scalar values
    How to add image in header html
    Inability to construct PEP 517-dependent wheels for _, hindering direct installation
    Requirement for psycopg2 version not met

Bootstrap Tutorials

    Complete Guide to Using Bootstrap, jQuery, Popper.js, and JavaScript Plugins via CDN
    Customize Bootstrap's Color Scheme Using Sass Variables and Maps: A Comprehensive Guide
    Create Stunning Image Overlays with Responsive Cards using Bootstrap
    How to Move the Toggle Menu to the Right in Bootstrap: A Complete Guide
    How to Center Content Vertically in Java Bootstrap: Techniques and Tips
    How to Make a Jumbotron Full Width and Customized with Background Images in Bootstrap
    Bootstrap Text Alignment: A Comprehensive Guide for Div Container
    How to Use Bootstrap Classes to Move Elements Left and Right - A Guide to float-left and float-right
    How to Style Bootstrap Tables with Custom Row Colors: A Comprehensive Guide
    HTML Button Alignment: How to Move Your Button to the Right Effectively

Artificial Intelligence

    Artificial Intelligence
    What's artificial intelligence?
    Importance of Artificial Intelligence
    What is artificial intelligence?
    How Artificial Intelligence Works?
    Uses of Artificial Intelligence
    How Artificial Intelligence And Natural Intelligence Works
    How long has artificial intelligence ai existed
    Why is artificial intelligence ai gaining importance
    Problem Solving in Artificial Intelligence

New tutorials

    Insert a string into other string at the specified position or after X paragraphs of a HTML content in PHP
    Create gradient text with Tailwind CSS
    Sticky Header, Footer and Fixed Sidebar with Tailwind CSS
    How to Install Tailwind CSS in a Laravel Project
    How to install Laravel?
    Popular PHP Frameworks in 2022
    4 tips to solve programming issues
    How to Enable Remote Access To MySQL Database Server?
    Install MySQL 8.0 on Ubuntu 20.04
    New command "model:show" in Laravel 9

Recommended posts

    Customize Bulma's default colors using SCSS without the need for downloading or installing
    Combining OR criteria in Hibernate's criteria query
    Enhancing Windows 7 Home Premium to Professional
    Understanding the Distinction between Embedded Systems and Real-Time Systems
    Viewing Files with DCR Extension: A Guide for Adobe Shockwave
    Verifying if a String Variable Represents a Double Value
    Limitations and Restrictions on Toll-Free Dialing
    Using the nm-connection-editor tool on Ubuntu: A Guide
    Curvature for parabola
    Managing Oozie Workflow Concurrency: Determining Optimal Number and Throttling Techniques
    Android's Notification System Fails to Display Multiple Lines
    Negotiating Control Connection with Implicit FTPS 3.2.5.1
    Pastebin API Paste Data
    Duplicate post: Getting an error of invalid syntax in Python when applying 'end' parameter to print function
    Mask-based bit manipulation in C# programming language
    Inscribed Rhombus
    Encountering a 404 Error while Retrieving Document Metadata through Google Drive API
    Combining FLAC audio files in Linux with varying sample rates without altering pitch
    Implementing AutoPlay on Windows 7/8: A Rephrased Guide
    Linking Oracle OCI Autonomous Database with Crystal Reports
    Tuple index out of range error while creating exe file with Py2exe [duplicate]
    Select2 Event for Tag Creation: A Rephrased Perspective
    Retrieving the Current DOM with Selenium Java 2.8 - A Guide
    Divs with vertical gap using CSS
    Html text strong
    Altering the tabBar's background color in React Native
    Capturing a screenshot with the real pointer icon: Step-by-step guide
    Installing pandas in PyCharm: A Step-by-Step Guide
    R-based techniques for detecting missing values
    Can Debian Snapshot Archives repository be used for package installation?

Ezoic
© CopyProgramming 2024 - All right reserved
About us Terms of Service Privacy Contact
x
x

