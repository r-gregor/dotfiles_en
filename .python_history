import sys
print(sys.executable)
def sum:
def sum(n):
	return n*(n+1)/2
sum(3)
sum(5)
sum(115)
sum(11500009)
sum(115000090000000000000007)
sum(4)
sum(5)
sum(6)
sum(7)
for i in range(10):
	print(f"sum({i:2d}) = {sum(i)}") 
N=15
for i in range(N):
	print(f"sum({i:2d}) = {sum(i)}") 
for i in range(N+1):
	print(f"sum({i:2d}) = {sum(i)}") 
for i in range(1, N+1):
	print(f"sum({i:2d}) = {sum(i)}") 
N=25
def showSum(N):
	for i in range(1, N+1):
		print(f"sum({i:2d}) = {sum(i)}")
showSum(N)
showSum(12)
showSum(102)
def showSum(N):
	for i in range(1, N+1):
		print(f"sum({i:3d}) = {sum(i)}")
showSum(102)
showSum(12)
showSum(4)
def showSum(N):
	for i in range(1, N+1):
		print(f"sum({i:-3d}) = {sum(i)}")
showSum(4)
showSum(14)
showSum(140)
def md1(x,y):
	return (x + y)/2
def ms2(x,y):
	return X + ((x-y)/2)
md1(4,2)
md2(4,2)
ms2(4,2)
def md2(x,y):
	return x + ((x-y)/2)
md2(4,2)
def md2(x,y):
	return y + ((x-y)/2)
md2(4,2)
md1(5,3)
md2(5,3)
md1(19,18)
md2(19,18)
V =("left","right")
s1, s2 = V
for N in ["1", "2"]:
print(f'side-1: {s1}, side-2: {s2}')
keys = [x for x in range(100)]
keys
t_size = 10
for key in keys:
	print(str(key) + "\t" + str(ky % t_size))
for key in keys:
	print(str(key) + "\t" + str(key % t_size))
map = {}
for key in range(11):
	map[key] = []
print map
print(map)
for key in keys:
	map[key % t_size].append(key)
print(map)
a = 5
b = 10
a = a ^ b
b = a ^ b
a = a ^ b
a
b
for exp in range(0,17):
print(f"2^{}:\t{}", exp, 2**exp)
for exp in range(0,17):
	print(f"2^{}:\t{}", exp, 2**exp)
for exp in range(0,17):
	print("2^{}:\t{}".format(exp, 2**exp))
for exp in range(0,33):
	print("2^{}:\t{}".format(exp, 2**exp))
for exp in range(0,33):
	print("2^{}:\t{}".format(exp, 2**expL))
	print("2^{}:\t{}L".format(exp, 2**exp))
for exp in range(0,33):
	print("2^{}:\t{}L".format(exp, 2**exp))
for exp in range(0,33):
	print("2^{}:\t{20}".format(exp, 2**exp))
for exp in range(0,33):
	print("2^{}:\t{20}".format(exp, 2**exp))
	print("2^{}:\t{20L}".format(exp, 2**exp))
for exp in range(0,33):
	print("2^{}:\t{20L}".format(exp, 2**exp))
for exp in range(0,33):
	print("2^{}:\t{20.0}".format(exp, 2**exp))
for exp in range(0,33):
	print("2^{}:\t{}".format(exp, 2**exp))
for exp in range(0,33):
	NUM = 2**exp
	print("2^{}:\t{}".format(exp, NUM))
for exp in range(0,65):
	NUM = 2**exp
	print("2^{}:\t{}".format(exp, NUM))
for exp in range(0,65):
	NUM = 2**exp
	print("2^{0:}:\t{1:e}".format(exp, NUM))
for exp in range(0,33):
	print("2^{0:}:\t{1:e}".format(exp, 2**exp))
import math
print(math.floor(1.9999999))
print(math.ceil(1.9999999))
print(math.avg(1.9999999))
help(math)
print(math.mean(1.9999999))
help(math)
print(math.log10(1000))
print(math.log10(10000))
print(int(math.log10(10000)))
print(int(math.log10(1e8)))
print(math.log10(1e5))
from pathlib import Path
Path.cwd()
Path(C:/Users/gregor.redelonghi/majfajls/BRISI)
Path(r'C:/Users/gregor.redelonghi/majfajls/BRISI')
Path(r"c:\Users\gregor.redelonghi\majstaf\BRISI")
N = 5
while N > 0:
print(1/(2^N))
while N > 0:
	print(1/(2^N))
while N > 0:
	print(1/(2^N))
	N -= 1
N = 5
while N > 0:
	print(1/(2^N))
	N -= 1
while N > 0:
	print(1/(2**N))
	N -= 1
N = 0
while N < 11:
	print(1/(2**N))
	N += 1
N = 0
while N < 11:
	print(f"1/2^{N}: {1/(2**N)}")
	N += 1
N = 0
while N < 11:
	print(f"1/2^{N}: {1/(2**N)};\t {(1/2**(N-1)) + (1/2**N)")
N = 0
while N < 11:
	print(f"1/2^{N}: {1/(2**N)};\t {(1/2**(N-1)) + (1/2**N)}")
	N += 1
N = 0
S = 0
while N < 11:
	print(f"1/2^{N}: {1/(2**N)};\tS: {S += (1/2**N)}")
N = 0
S = 0
while N < 11:
	print(f"1/2^{N}: {1/(2**N)};\tS: {S+=(1/2**N)}")
while N < 11:
	print(f"1/2^{N}: {1/(2**N)};\tS: {S = S + (1/2**N)}")
while N < 11:
	print(f"1/2^{N}: {1/(2**N)};\tS: {S = S + 1/(2**N)}")
import sys
print(sys.executable)
sum = 0
for i in range 10001:
for i in range(10001):
	sum += 1
	print(f"sum after {i} iterations: {sum}")
import sys
print(sys.executable)
import sys
print(sys.executable)
a = 1
print((a<<1) + (a<<2))
a = 2
print((a<<1) + (a<<2))
a = 2
a = 1
print((a<<1) + (a<<2))
print((a<<3) - a))
print((a<<3) - a)
print((a<<5) - a)
print((a<<5) - (a<<2))
a
print((a<<5) - (a<<1))
print((a<<5) - (a<<2))
print((a<<5) - (a<<3))
exit()
import itertools
help(permutations)
help(itertools.permutations)
permutations(range(1,3), 2)
itertools.permutations(range(1,3), 2)
print(itertools.permutations(range(1,3), 2))
for N in itertools.permutations(range(1,3), 2):
	print(N)
for N in itertools.permutations(range(1,3), 3):
	print(N)
for N in itertools.permutations(range(3), 3):
	print(N)
for N in itertools.permutations(range(10), 2):
	print(N)
for N in itertools.permutations(range(10), 4):
	print(N)
i = 0
for N in itertools.permutations(range(10), 4):
	print(f"{i}\t{N}")
	i += 1
for N in itertools.permutations(range(10), 4):
import itertools as it
help(it.permutations())
help(it.permutations)
x023
0x23
exit()
import os
help(os.environ)
print(os.environ.get())
print(os.environ.get(PATH))
print(os.environ.get('PATH'))
print(os.environ.get('PATH')).replace(':', '\n')
print(os.environ.get('PATH').replace(':','\n')
print(os.environ.get('PATH').replace(':','\n'))
print(os.environ.get('PATH').replace(':','\n')) | uniq
print(os.environ.get('PATH').replace(':','\n'))
print(os.environ.get('PATH').replace(':','\n')) > test.txt
print(os.environ.get('PATH').replace(':','\n'))
exit
import sys
print(sys.executable)
import sys
print(sys.executable)
ll
def show_name(full_name):
	"""function separates full_name into name and rest and dsplays them"""
	name_parts=full_name.split(" ")
	name = name_parts[0]
	last = name_parts[1:]
	print("Name: " + name)
	print(Last: " + last)
def show_name(full_name):
	"""function separates full_name into name and rest and dsplays them"""
	name_parts=full_name.split(" ")
	name = name_parts[0]
	last = name_parts[1:]
	print("Name: " + name)
	print("Last: " + last)
show_name("Gregor Redelonghi")
help(show_name("Gregor Redelonghi"))
help(show_name())
importtest.py
help(show_name())
help(show_name)
help(show_name(""))
import test.py
import ./test.py
import test.py
help(test.py.Member())
import test.py
import test
help(Member())
help(test.Member())
help(test.Member("Gregor Redelonghi"))
import test
help(test.Member("Gregor Redelonghi"))
import tets
import test
help(test.Member("Gregor Redelonghi"))
help(test.Member("Gregor Redelonghi")i.show_info())
help(test.Member("Gregor Redelonghi").show_info())
help(test.Member("Gregor Redelonghi").show_name())
import test
help(test)
import os
print(os.environ('JAVA')
print(os.environ('JAVA'))
print(os.getenv('JAVA'))
print(os.getenv('JAVA_HOME'))
print(2**32)
num = 2**32
nums = str(num)
nums[2]
for N in range(len(nums)):
	print(nums[N])
for N in range(len(nums)):
	print(nums[N:2])
for N in range(len(nums)):
	print(nums[N:2:1])
	print(nums[N:2:-1])
	print(nums[N:2:1])
for N in range(len(nums)):
	print(nums[N:2:1])
for N in range(len(nums)):
	print(nums[N:2:-1])
ptint(nums)
print(nums)
for N in range(len(nums)):
	print(nums[N:2:1])
	print(nums[N::1])
for N in range(len(nums)):
	print(nums[N::1])
for N in range(len(nums)):
	print(nums[N::-1])
for N in range(len(nums)):
	print(nums[N::])
for N in range(len(nums)):
	print(log(nums[N::]))
for N in range(len(nums)):
	print(Math.log(nums[N::]))
import math
for N in range(len(nums)):
	print(Math.log(nums[N::]))
for N in range(len(nums)):
	print(math.log(nums[N::]))
for N in range(len(nums)):
	print(math.log(num[N::]))
	print(math.log(num))
for N in range(len(nums)):
	print(math.log(num))
for N in range(len(nums)):
	print(math.log(nums[N::1]))
for N in range(len(nums)):
	print(nums[N::1])
	print(nums[N])
	print(nums[N::1])
for N in range(len(nums)):
	print(nums[N])
for N in range(len(nums)):
	print(nums[N], end="")
for N in range(len(nums)):
	print(nums[N], end="")
print()
for N in range(len(nums)):
	print(nums[N], end="")
print("")
for N in range(len(nums)):
	print(nums[N], end="")
print("\n")
print("")
for N in range(len(nums)):
	print(nums[N], end="")
print()
for N in range(len(nums)):
	print(nums[N], end="")
print()
NUM = 123456789
print(NUM, sep=".")
0xcd
13 * 1 + 12 * 16
import os
help os.Stat()
help(os.Stat())
help(os.stat())
!ls
f=progressbar.sh
f="progressbar.sh"
import os
os.stat(f)
data = list(os.stat(f))
data
data = dict(os.stat(f))
print(os.stat(f))
help(os.stat_result())
help(os.stat_result(f))
print(os.stat(f))
print(os.stat(f).st_ino)
print(os.stat(f).st_size)
finfo = os.stat(f)
finfo.st_ctime()
print(finfo.st_ctime())
print(os.stat(f).st_ctime())
finfo.st_ctime
finfo.st_mtime
finfo.st_size
exit
100*1024*1024
10*1024*1024
1*1024*1024
q
N=20
print(f"{:x}",N)
print(f"{N:x}")
print(F"{20:x}")
print(F"{N:x}", N=20)
print("{:x}", N=20)
print("{:x}", format(20))
print("0:x", format(20))
print("0:x".format(20))
print("{0:x}".format(20))
2**64
1.8e19
a = 1.8e19
a
a/100 *100
a/100
man printf
import decimal
A=1.8e18
A
decimal.decimal(A)
decimal(A)
decimal.Decimal(A)
A=2**64
A
exit()
2**5
2**6
64-16
exit()
64*5
64*10
exit()
import math
print (math.atan(0.39))
print (math.atan(1)*7)
print (math.atan(1)*4)
PI()
pritn(math.PI)
pritn(math.pi)
print(math.pi)
print (math.atan(1)*4)
2++12
2**12
1<<13
2<<13
2++13
2**13
1<<13
2*(1<<13)
16**3
complex(3, -1) * complex(4, 2)
complex(1,1) * complex(1,1)
complex(1,1) * complex(0,1)
complex(1,1) * complex(0,1) * complex(0,1)
complex(1,1) * complex(0,1) * complex(0,1) * complex(0,1)
complex(1,1) * complex(0,1) * complex(0,1) * complex(0,1) * complex(0,1)
e
math.e
import math
math.e
f = open("calibrations_small.txt", "r")
len(f)
f-length()
f.length()
f.size()
size(f)
readline(f)
read(f)
print(f)
print(str(f))
game = [0]
game.append(2)
game
game = [{0:0}]
game.append({1:14})
game.append({2:7})
game
print(game.get(2))
print(game(2))
print(game[2].value())
print(game[2]get())
print(game[2].get())
print(game[2].get(2))
string = "abcde"
print(string[0])
string = "ABCDEF"
sub = ""
sub += string[0]
sub
string = "ABCDEF"
string
string = string[1:]
string
a = 4
b = 6
b = b + a
b
a = b - a
a
b = b - a
b
import sys
sys.path
